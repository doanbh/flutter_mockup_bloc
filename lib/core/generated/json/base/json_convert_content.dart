// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.

import 'package:flutter_mockup_bloc/model/AuthorResponse.dart';
import 'package:flutter_mockup_bloc/model/City.dart';
import 'package:flutter_mockup_bloc/model/LoginResponse.dart';
import 'package:flutter_mockup_bloc/model/UserItem.dart';
import 'package:flutter_mockup_bloc/model/request_response.dart';

JsonConvert jsonConvert = JsonConvert();

class JsonConvert {

  T? convert<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    return asT<T>(value);
  }

  T? asT<T extends Object?>(dynamic value) {
    if (value is T) {
      return value;
    }
    final String type = T.toString();
    try {
      final String valueS = value.toString();
      if (type == "String") {
        return valueS as T;
      } else if (type == "int") {
        final int? intValue = int.tryParse(valueS);
        if (intValue == null) {
          return double.tryParse(valueS)?.toInt() as T?;
        } else {
          return intValue as T;
        }      } else if (type == "double") {
        return double.parse(valueS) as T;
      } else if (type ==  "DateTime") {
        return DateTime.parse(valueS) as T;
      } else if (type ==  "bool") {
        if (valueS == '0' || valueS == '1') {
          return (valueS == '1') as T;
        }
        return (valueS == 'true') as T;
      } else {
        return JsonConvert.fromJsonAsT<T>(value);
      }
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return null;
    }
  }
  //Go back to a single instance by type
  static M? _fromJsonSingle<M>(Map<String, dynamic> json) {
    // nhớ gen file json model xong phải vào đây thêm model để convert ở dio
    final String type = M.toString();
    if (type == (City).toString()){
      return City.fromJson(json) as M;
    }

    if (type == (LoginResponse).toString()){
      return LoginResponse.fromJson(json) as M;
    }

    if (type == (AuthorResponse).toString()){
      return AuthorResponse.fromJson(json) as M;
    }

    if (type == (UserItem).toString()){
      return UserItem.fromJson(json) as M;
    }

    print("$type not found");

    return null;
  }

  static M? fromJsonAsT<M>(RequestResponse json) {
    return _fromJsonSingle<M>(json.data);
  }
}